name: Rust

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Minimum supported Rust version.
  msrv: 1.61.0
  # Nightly Rust toolchain for checking no-std support.
  nightly: nightly-2022-09-22

jobs:
  build-msrv:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-msrv-cargo-build-target

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.msrv }}
          override: true

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --features serde --all-targets
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --features serde --doc

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Clippy (non-conflicting features)
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Clippy: non-conflicting features"
          args: --workspace --features serde --all-targets -- -D warnings
      - name: Clippy (features=hashbrown)
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Clippy: features=hashbrown"
          args: --lib --no-default-features --features hashbrown -- -D warnings
      - name: Clippy (features=hashbrown,serde,dalek/u32)
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Clippy: features=hashbrown,serde,dalek/u32"
          args: --lib --no-default-features --features hashbrown,serde,curve25519-dalek/u32_backend -- -D warnings
      - name: Clippy (features=std,serde,dalek-ng)
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Clippy: features=std,serde,dalek-ng"
          args: --lib --no-default-features --features std,serde,curve25519-dalek-ng/u64_backend -- -D warnings

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --features serde --all-targets
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --features serde --doc

      - name: Run voting (ristretto)
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -p elastic-elgamal --features serde --example voting -- --options 5 --votes 50 --talliers 3/4
      - name: Run voting (quadratic, k256)
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -p elastic-elgamal --features serde --example voting -- --qv k256
      - name: Run range
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -p elastic-elgamal --features serde --example range
      - name: Run equivalence
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -p elastic-elgamal --no-default-features --features std,serde,curve25519-dalek-ng/u64_backend --example equivalence

  build-nostd:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-nostd-cargo-build-target

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          target: thumbv7m-none-eabi
          override: true
          profile: minimal

      - name: Build library
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --lib --no-default-features --features hashbrown,curve25519-dalek/u32_backend --target thumbv7m-none-eabi -Z avoid-dev-deps

  document:
    if: github.event_name == 'push'
    needs:
      - build
      - build-msrv
      - build-nostd
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-document-target

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          profile: minimal
          override: true

      - name: Build docs
        run: |
          cargo clean --doc && cargo rustdoc -p elastic-elgamal --features serde -- --cfg docsrs

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BRANCH: gh-pages
          FOLDER: target/doc
          SINGLE_COMMIT: true
